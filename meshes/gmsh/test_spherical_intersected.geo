SetFactory("OpenCASCADE");
//Starting with a box of length = 1
Box(1) = {0, 0, 0, 1, 1, 1};
x = 0; y = 0; z = 0; 
//-----------------------------------------------------------------------------------------------------------------------
//Copy in the section below the geometric information generated from the pre-processing module in meshes/txt_mesh/
//The geometric information starts from the first line until
//this line -> v() = BooleanFragments { Volume{1}; Delete; }{ Volume{2:n}; Delete; };
//-----------------------------------------------------------------------------------------------------------------------
Sphere(2) = {x+0.27291531726917606, y+0.2513475588500664, z+0.40365202631747427, 0.11969976384035642}; 
Sphere(3) = {x+0.4587863243356187, y+0.2099098416053179, z+0.5942082961387574, 0.11963940213581523}; 
Sphere(4) = {x+0.8297109922019412, y+0.8306752441982462, z+0.644206315051312, 0.11894793414688569}; 
Sphere(5) = {x+0.4430907517603492, y+0.682150390203818, z+0.5857563300776829, 0.11873963092587082}; 
Sphere(6) = {x+0.2654050291470395, y+0.3730563387327531, z+0.13353474934484977, 0.11747732689236084}; 
Sphere(7) = {x+0.7655298665050155, y+0.7228001189149152, z+0.40906361540848274, 0.11678106406557705}; 
Sphere(8) = {x+0.4433905824932009, y+0.8667408777625063, z+0.13385694237170292, 0.11645599051030331}; 
Sphere(9) = {x+0.6942257725044723, y+0.14955702567235102, z+0.6617759769568405, 0.11643445032083471}; 
Sphere(10) = {x+0.26272258010673455, y+0.44253928725937175, z+0.5736481174070791, 0.11620686643987681}; 
Sphere(11) = {x+0.5111758218189177, y+0.21095057151062033, z+0.8775698011752348, 0.11605556034521072}; 
Sphere(12) = {x+0.648779633166083, y+0.4041373780693288, z+0.7680096934302253, 0.11595930782940811}; 
Sphere(13) = {x+0.5791334043267286, y+0.48116363606336776, z+0.17124426625604436, 0.11489468400388128}; 
Sphere(14) = {x+0.22305995868910528, y+0.5654797797815577, z+0.7946379765081204, 0.11413953142672309}; 
Sphere(15) = {x+0.7570033233421887, y+0.5729246357658425, z+0.6991260075351923, 0.11410573353129927}; 
Sphere(16) = {x+0.45342287592191005, y+0.4628068254251274, z+0.5931072936495969, 0.11293120587723347}; 
Sphere(17) = {x+0.6687771148407946, y+0.4056826963690792, z+0.44387814439445433, 0.11250127030463491}; 
Sphere(18) = {x+0.14341927257531922, y+0.7492273055808043, z+0.4218598524093237, 0.11157414477873694}; 
Sphere(19) = {x+0.5623045567210689, y+0.873260042709018, z+0.3138656453297122, 0.11069294297479187}; 
Sphere(20) = {x+0.6679618999206326, y+0.7795642761719688, z+0.7473083536354836, 0.11060290678818856}; 
Sphere(21) = {x+0.5061006439510234, y+0.30511156375349685, z+0.2213478290576062, 0.11051457155876601}; 
Sphere(22) = {x+0.14117973637223208, y+0.16666524867546742, z+0.5255872226962608, 0.10966603308090332}; 
Sphere(23) = {x+0.8594449048388624, y+0.43800045891863687, z+0.3762209705842742, 0.10921822969149207}; 
Sphere(24) = {x+0.729672578909665, y+0.2686823715482486, z+0.8828803717835773, 0.10900755727022803}; 
Sphere(25) = {x+0.3533537750471267, y+0.7709151100006447, z+0.7337198018114223, 0.10898858865753915}; 
Sphere(26) = {x+0.8271418715198087, y+0.31594454261319055, z+0.1847612018349834, 0.10885195568325218}; 
Sphere(27) = {x+0.1316073515265773, y+0.3841877886382292, z+0.319387799045532, 0.10869420701751492}; 
Sphere(28) = {x+0.11963890256359182, y+0.794032789421133, z+0.6298596919152251, 0.10859505941161801}; 
Sphere(29) = {x+0.8460234889263175, y+0.8315864537653774, z+0.19869876001466327, 0.10840314678111726}; 
Sphere(30) = {x+0.8687303835499393, y+0.7561806334375757, z+0.8690073903838518, 0.10811202605416752}; 
Sphere(31) = {x+0.13249346596460557, y+0.18929663411885161, z+0.757422724966293, 0.10795810520792763}; 
Sphere(32) = {x+0.6978418543158685, y+0.753269370401637, z+0.11093963251173172, 0.10697004728145357}; 
Sphere(33) = {x+0.43717231224765885, y+0.7414719426168643, z+0.36301013122998194, 0.10684067215147425}; 
Sphere(34) = {x+0.21006069357633883, y+0.14719203073507467, z+0.24312223189349288, 0.10548271857055408}; 
Sphere(35) = {x+0.34641895061475764, y+0.517641513605305, z+0.26691235516340883, 0.1053457835426389}; 
Sphere(36) = {x+0.5223501093177719, y+0.1828175794726983, z+0.4080790247081126, 0.10500182094321407}; 
Sphere(37) = {x+0.8861464836284924, y+0.5099458579905851, z+0.5653019329408687, 0.10486029157406297}; 
Sphere(38) = {x+0.27524886378088914, y+0.5587531421062528, z+0.42736426331998484, 0.10483517491616497}; 
Sphere(39) = {x+0.8873638667231234, y+0.11419928740013513, z+0.6770751964086362, 0.10477766976686394}; 
Sphere(40) = {x+0.10933583734770874, y+0.8102243581687075, z+0.23798668309047227, 0.10439295394250715}; 
Sphere(41) = {x+0.39540748456944697, y+0.10776674611454061, z+0.2988470154750871, 0.10367590563113631}; 
Sphere(42) = {x+0.5849678866168987, y+0.6409557432809061, z+0.45610791567344094, 0.10356965401293479}; 
Sphere(43) = {x+0.812395475778875, y+0.42899114220227785, z+0.8542146967567489, 0.10336054140920557}; 
Sphere(44) = {x+0.5059361789378019, y+0.808457680786885, z+0.8347368923642483, 0.10308805976447813}; 
Sphere(45) = {x+0.38250430350401177, y+0.22746513701269205, z+0.11552986908385415, 0.10262883248139185}; 
Sphere(46) = {x+0.6934890228495247, y+0.2784585728235749, z+0.3169799525069187, 0.10213238248574752}; 
Sphere(47) = {x+0.7132086609805327, y+0.540432525536668, z+0.3001688228879526, 0.10213216867192232}; 
Sphere(48) = {x+0.469576709076573, y+0.8739846367995849, z+0.49314756286510353, 0.10185148143606428}; 
Sphere(49) = {x+0.12459309793163677, y+0.5746318738062745, z+0.16247964706661622, 0.10183642420474652}; 
Sphere(50) = {x+0.8580399927511687, y+0.2444542248633616, z+0.47739537564495427, 0.1016955576411152}; 
Sphere(51) = {x+0.6470092408952516, y+0.14528981064398178, z+0.13615601762049728, 0.10115880390777024}; 
Sphere(52) = {x+0.39051177507562984, y+0.32666666084294205, z+0.7931920825582641, 0.10104704414425766}; 
Sphere(53) = {x+0.22573446075680403, y+0.258010594190612, z+0.8875279296870613, 0.10103809340090403}; 
Sphere(54) = {x+0.5337931977335161, y+0.6391547994570936, z+0.8944926975620788, 0.10054786487352874}; 
Sphere(55) = {x+0.4862976056343228, y+0.670370939559085, z+0.2034824135830458, 0.10035950800653784}; 
v() = BooleanFragments { Volume{1}; Delete; }{ Volume{2 :55}; Delete; }; 
//-----------------------------------------------------------------------------------------------------------------------
// STL mesh for bounding boxes:
Geometry.OCCBoundsUseStl = 1;
eps = 1e-3;
//volumes in the bounding box of the original box
vin() = Volume In BoundingBox {-eps,-eps,-eps, 1+eps,1+eps,1+eps};
v() -= vin();
//Deleting the volumes outside the volume of the origina box
Recursive Delete{ Volume{v()}; }
//--------------------------------------------------------------------------------------
//For applying periodic boundaries
//We get all surfaces on the left:
Sxmin() = Surface In BoundingBox{-eps, -eps, -eps, +eps, 1+eps, 1+eps};
For i In {0:#Sxmin()-1}
  // We get the bounding box of the left surfaces
  bb() = BoundingBox Surface { Sxmin(i) };
  // We translate the bounding box to the right and look for surfaces inside i
  Sxmax() = Surface In BoundingBox { bb(0)-eps+1, bb(1)-eps, bb(2)-eps,
                                     bb(3)+eps+1, bb(4)+eps, bb(5)+eps };
  // For all the matches, we compare the corresponding bounding boxes
  For j In {0:#Sxmax()-1}
    bb2() = BoundingBox Surface { Sxmax(j) };
    bb2(0) -= 1;
    bb2(3) -= 1;
    // if they match, we apply the periodicity constraint
    If(Fabs(bb2(0)-bb(0)) < eps && Fabs(bb2(1)-bb(1)) < eps &&
       Fabs(bb2(2)-bb(2)) < eps && Fabs(bb2(3)-bb(3)) < eps &&
       Fabs(bb2(4)-bb(4)) < eps && Fabs(bb2(5)-bb(5)) < eps)
      Periodic Surface {Sxmax(j)} = {Sxmin(i)} Translate {1,0,0};
    EndIf
  EndFor
EndFor

//We get all surfaces on the outside:
Symin() = Surface In BoundingBox{-eps, -eps, -eps, 1+eps, eps, 1+eps};
For i In {0:#Symin()-1}
  // We get the bounding box of each outter surface
  bb() = BoundingBox Surface { Symin(i) };
  // We translate the bounding box to the inside and look for surfaces inside i
  Symax() = Surface In BoundingBox { bb(0)-eps, bb(1)-eps+1, bb(2)-eps,
                                     bb(3)+eps, bb(4)+eps+1, bb(5)+eps };
  // For all the matches, we compare the corresponding bounding boxes
  For j In {0:#Symax()-1}
    bb2() = BoundingBox Surface { Symax(j) };
    bb2(1) -= 1;
    bb2(4) -= 1;
    // if they match, we apply the periodicity constraint
    If(Fabs(bb2(0)-bb(0)) < eps && Fabs(bb2(1)-bb(1)) < eps &&
       Fabs(bb2(2)-bb(2)) < eps && Fabs(bb2(3)-bb(3)) < eps &&
       Fabs(bb2(4)-bb(4)) < eps && Fabs(bb2(5)-bb(5)) < eps)
      Periodic Surface {Symax(j)} = {Symin(i)} Translate {0,1,0};
    EndIf
  EndFor
EndFor

// We get all surfaces on the bottom:
Szmin() = Surface In BoundingBox{-eps, -eps, -eps, 1+eps, 1+eps, +eps};

For i In {0:#Szmin()-1}
  // We get the bounding box of each bottom surface
  bb() = BoundingBox Surface { Szmin(i) };
  // We translate the bounding box to the top and look for surfaces inside i
  Szmax() = Surface In BoundingBox { bb(0)-eps, bb(1)-eps, bb(2)-eps+1,
                                     bb(3)+eps, bb(4)+eps, bb(5)+eps+1 };
  // For all the matches, we compare the corresponding bounding boxes
  For j In {0:#Szmax()-1}
    bb2() = BoundingBox Surface { Szmax(j) };
    bb2(2) -= 1;
    bb2(5) -= 1;
    // ...and if they match, we apply the periodicity constraint
    If(Fabs(bb2(0)-bb(0)) < eps && Fabs(bb2(1)-bb(1)) < eps &&
       Fabs(bb2(2)-bb(2)) < eps && Fabs(bb2(3)-bb(3)) < eps &&
       Fabs(bb2(4)-bb(4)) < eps && Fabs(bb2(5)-bb(5)) < eps)
      Periodic Surface {Szmax(j)} = {Szmin(i)} Translate {0,0,1};
    EndIf
  EndFor
EndFor
//---------------------------------------------------------------------------------------------------------------------------------------
//In this section we copy the rest of the information gathered from the file generated from the pre-processing module in meshes/txt_mesh/
//---------------------------------------------------------------------------------------------------------------------------------------
Physical Volume(1) = {52};
Physical Volume(2) = {14, 30, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154};
Mesh.CharacteristicLengthMin = 0.07; 
Mesh.CharacteristicLengthMax = 0.07; 
//------------------------------------------------------------------------------------------------------------------------------------------
